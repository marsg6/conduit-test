# 개인적으로 제작하여 작업을 함께 하는 팀에 공유하고 평소에 사용하는 규격입니다.
###########################################
# 제목을 다음 라인에 작성

###########################################
# 아래 빈 라인은 건드리지 말 것

###########################################
# 본문을 다음 라인에 작성. 본문은 최대한 상세하게 작성하며, 불필요한 내용(squash 로그 등)은 제거할 것

###########################################
# 제목 작성 규칙
#
# "{[u]}[타입{/영역}{/JIRA_TICKET_NUMBER}] 수정 사항" 형식
# ex. [u][refactor/home/FA-147] 홈 화면 ui 디자인 변경
# ex. [etc/FA-128] git commit message template 수정
#
# ㄱ. 타 부서에 공유해야하는 업데이트 내역의 경우 [u]를 맨 앞에 붙이고 내용을 상세히 기술할 것
# 
# ㄴ. 타입 작성 규칙
### feature   : 일반 기능
### fix       : 버그 및 오류 수정 사항
### refactor  : 소스 혹은 UI/UX 상 개선 사항
### etc       : 기타 사항
### hotfix    : 현재 출시된 버전에서의 긴급 수정 사항
#
# ㄷ. 영역 작성 규칙
### 영역은 생략 가능.
### home, account_link 등, 구분히 필요하고 식별에 도움이 되는 경우에 작성
#
# ㄹ. 수정 사항 작성 규칙
### 수정 내용을 대표하도록 작성
#
###########################################
# 기타 설명
# - 다음 커맨드를 사용하여 template 적용
# - git config commit.template .gitmessage.txt
# - git command 입력 / i 눌러서 작성 / esc, :wq로 종료
###########################################
#
# vim에서 라인 삭제 방법 : 일반 모드에서 삭제할 라인에 위치한 후 dd